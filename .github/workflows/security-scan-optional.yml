name: Security Scan (Optional)

on:
  schedule:
    # Run security scan every Sunday at 2 AM UTC
    - cron: '0 2 * * 0'
  workflow_dispatch: # Allow manual trigger
    inputs:
      image_tag:
        description: 'Docker image tag to scan (default: latest)'
        required: false
        default: 'latest'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - name: Set image tag
      run: |
        if [ "${{ github.event.inputs.image_tag }}" != "" ]; then
          echo "IMAGE_TAG=${{ github.event.inputs.image_tag }}" >> $GITHUB_ENV
        else
          echo "IMAGE_TAG=latest" >> $GITHUB_ENV
        fi
        echo "Will scan: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:$IMAGE_TAG"
    
    - name: Login to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Pull Docker image
      run: |
        echo "📥 Pulling Docker image..."
        docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }} || {
          echo "❌ Failed to pull image. Available tags:"
          curl -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
               -H "Accept: application/vnd.github.v3+json" \
               "https://api.github.com/users/${{ github.actor }}/packages/container/${{ github.event.repository.name }}/versions" | \
               jq -r '.[].metadata.container.tags[]' | head -10 || echo "Could not fetch tags"
          exit 1
        }
    
    - name: Run filesystem scan
      continue-on-error: true
      run: |
        echo "📁 Running filesystem security scan..."
        docker run --rm \
          -v ${{ github.workspace }}:/workspace \
          aquasec/trivy:latest fs /workspace \
          --exit-code 0 \
          --severity HIGH,CRITICAL \
          --format table
    
    - name: Run container image scan
      continue-on-error: true
      run: |
        echo "🐳 Running container image security scan..."
        docker run --rm \
          -v /var/run/docker.sock:/var/run/docker.sock \
          aquasec/trivy:latest image \
          --exit-code 0 \
          --severity HIGH,CRITICAL \
          --format table \
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
    
    - name: Generate detailed report
      continue-on-error: true
      run: |
        echo "📊 Generating detailed security report..."
        
        # Create reports directory
        mkdir -p security-reports
        
        # Generate JSON report for image
        docker run --rm \
          -v /var/run/docker.sock:/var/run/docker.sock \
          -v ${{ github.workspace }}/security-reports:/reports \
          aquasec/trivy:latest image \
          --exit-code 0 \
          --format json \
          --output /reports/image-scan.json \
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }} || echo "Image scan failed"
        
        # Generate filesystem report if we have workspace
        if [ -d "${{ github.workspace }}" ]; then
          docker run --rm \
            -v ${{ github.workspace }}:/workspace \
            -v ${{ github.workspace }}/security-reports:/reports \
            aquasec/trivy:latest fs /workspace \
            --exit-code 0 \
            --format json \
            --output /reports/filesystem-scan.json || echo "Filesystem scan failed"
        fi
        
        echo "📄 Generated reports:"
        ls -la security-reports/ || echo "No reports generated"
    
    - name: Create summary
      if: always()
      run: |
        echo "📋 Security Scan Summary" >> $GITHUB_STEP_SUMMARY
        echo "=========================" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Image Scanned:** \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Scan Date:** $(date -u)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ -f security-reports/image-scan.json ]; then
          echo "**Image Vulnerabilities:**" >> $GITHUB_STEP_SUMMARY
          # Count vulnerabilities by severity
          jq -r '.Results[]?.Vulnerabilities[]? | .Severity' security-reports/image-scan.json 2>/dev/null | sort | uniq -c | while read count severity; do
            echo "- $severity: $count" >> $GITHUB_STEP_SUMMARY
          done || echo "- No vulnerabilities found or scan failed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ -f security-reports/filesystem-scan.json ]; then
          echo "**Filesystem Vulnerabilities:**" >> $GITHUB_STEP_SUMMARY
          jq -r '.Results[]?.Vulnerabilities[]? | .Severity' security-reports/filesystem-scan.json 2>/dev/null | sort | uniq -c | while read count severity; do
            echo "- $severity: $count" >> $GITHUB_STEP_SUMMARY
          done || echo "- No vulnerabilities found or scan failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "View detailed reports in the artifacts section." >> $GITHUB_STEP_SUMMARY
    
    - name: Upload security reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-reports-${{ env.IMAGE_TAG }}
        path: security-reports/
        retention-days: 90
    
    - name: Create issue on critical vulnerabilities
      if: always()
      continue-on-error: true
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          
          if (!fs.existsSync('security-reports/image-scan.json')) {
            console.log('No scan results to process');
            return;
          }
          
          const scanResults = JSON.parse(fs.readFileSync('security-reports/image-scan.json', 'utf8'));
          
          let criticalCount = 0;
          let highCount = 0;
          
          // Count vulnerabilities
          if (scanResults.Results) {
            scanResults.Results.forEach(result => {
              if (result.Vulnerabilities) {
                result.Vulnerabilities.forEach(vuln => {
                  if (vuln.Severity === 'CRITICAL') criticalCount++;
                  if (vuln.Severity === 'HIGH') highCount++;
                });
              }
            });
          }
          
          // Only create issue if critical vulnerabilities found
          if (criticalCount > 0) {
            const title = `🚨 Critical Security Vulnerabilities Detected`;
            const body = `## Security Scan Results
          
          **Image:** \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}\`
          **Scan Date:** ${new Date().toISOString()}
          
          ### Summary
          - **Critical:** ${criticalCount}
          - **High:** ${highCount}
          
          ### Action Required
          Please review the security scan artifacts and update dependencies as needed.
          
          ### Reports
          Download detailed reports from the [workflow artifacts](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}).
          
          ---
          *This issue was automatically created by the security scan workflow.*`;
          
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: body,
              labels: ['security', 'critical']
            });
            
            console.log(`Created security issue for ${criticalCount} critical vulnerabilities`);
          } else {
            console.log(`No critical vulnerabilities found (${highCount} high severity)`);
          }