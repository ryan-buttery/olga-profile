name: CI/CD Pipeline

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch: # Allow manual trigger

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Job 1: Build and Test
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build SASS to CSS
      run: npm run build
    
    - name: Verify build output
      run: |
        echo "Checking if CSS was built..."
        ls -la assets/css/
        test -f assets/css/style.css || exit 1
        echo "‚úÖ CSS build successful"
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: built-website
        path: |
          *.html
          assets/
          nginx.conf
        retention-days: 7

  # Job 2: Docker Build and Push
  docker-build-push:
    needs: build-and-test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: built-website
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.simple
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Job 3: Deploy to GitHub Pages (optional)
  deploy-pages:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    # Grant GITHUB_TOKEN the permissions required to make a Pages deployment
    permissions:
      pages: write
      id-token: write
    
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: built-website
    
    - name: Setup Pages
      uses: actions/configure-pages@v4
    
    - name: Upload to GitHub Pages
      uses: actions/upload-pages-artifact@v3
      with:
        path: .
    
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4

  # Job 4: Security Scan
  security-scan:
    needs: docker-build-push
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    continue-on-error: true  # Don't fail the entire workflow if security scan fails
    permissions:
      contents: read
      security-events: write  # Required for uploading SARIF results
      actions: read           # Required for accessing artifacts
    
    steps:
    - name: Wait for image to be available
      run: |
        echo "‚è≥ Waiting for Docker image to be available in registry..."
        sleep 30
        
        # Check if image exists
        echo "üîç Checking if image exists..."
        docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }} || {
          echo "‚ùå Image not found in registry, trying latest tag..."
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest || {
            echo "‚ùå No image found, skipping security scan"
            exit 0
          }
        }
    
    - name: Run Trivy vulnerability scanner (table format)
      run: |
        echo "üîí Running Trivy security scan..."
        
        # Try with commit SHA first
        IMAGE_TAG="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}"
        
        # Check if image with SHA exists, otherwise use latest
        if ! docker image inspect "$IMAGE_TAG" >/dev/null 2>&1; then
          echo "‚ö†Ô∏è SHA-tagged image not found, using latest"
          IMAGE_TAG="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"
        fi
        
        echo "üìä Scanning image: $IMAGE_TAG"
        
        # Run Trivy scan with table output for visibility
        docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
          aquasec/trivy:latest image --exit-code 0 --severity HIGH,CRITICAL \
          --format table "$IMAGE_TAG" || {
          echo "‚ö†Ô∏è Trivy scan encountered issues, but continuing..."
        }
    
    - name: Run Trivy vulnerability scanner (SARIF format)
      uses: aquasecurity/trivy-action@master
      continue-on-error: true
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
        format: 'sarif'
        output: 'trivy-results.sarif'
        exit-code: '0'  # Don't fail on vulnerabilities found
        severity: 'HIGH,CRITICAL'
    
    - name: Show SARIF results
      if: always()
      run: |
        echo "üìã Security scan results:"
        if [ -f trivy-results.sarif ]; then
          echo "‚úÖ SARIF file generated successfully"
          # Show summary
          grep -o '"level":"[^"]*"' trivy-results.sarif | sort | uniq -c || echo "No issues found in SARIF"
        else
          echo "‚ö†Ô∏è SARIF file not generated"
        fi
    
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always() && hashFiles('trivy-results.sarif') != ''
      continue-on-error: true
      with:
        sarif_file: 'trivy-results.sarif'
    
    - name: Upload scan results as artifact
      uses: actions/upload-artifact@v4
      if: always()
      continue-on-error: true
      with:
        name: security-scan-results
        path: trivy-results.sarif
        retention-days: 30